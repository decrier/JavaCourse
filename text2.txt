//Diese Datei ist im Formular Gemeinsamer Antrag GES unter Dateien abzulegen
$(function () {

    const tableId = "MUTTERKUEHE";

    let options = (function () {

        let obj = {};

        obj.allowManualInsertRow = false;
        obj.tableId = tableId;
        obj.tableSelector = "[data-name=MUTTERKUEHETABLE]";
        obj.minRows = 3;
        obj.columnSorting = true;
        obj.search = true;
        obj.text = {search:"Suchen"};
        obj.tableHeight = '50rem';

        let LISTS = {
            NACHWEISKALBUNG_SOURCE(el, x, y, table) {
                let fileName = table.getValueInColumnByName("FILE", y) || "Datei Hochladen";
                return [
                    {id: "hitgeburtnachweis", name: "HIT-Geburtsmeldung"},
                    {id: "sonstigernachweis", name: '<p>Sonstiger Beleg</p><input type="button" class="kalbung-nachweis" value="' + fileName + '" />'},
                ];
            },
            BEANTRAGUNGSART_SOURCE() {
                return [
                    {id: "nicht_beantragt", name: "Nicht Beantragt"},
                    {id: "beantragt", name: "Beantragt"},
                    {id: "ersatzstier", name: "Ersatztier"},
                ];
            },
            AENDERUNGSART_SOURCE() {
                return [
                    {id: "0", name: "Natürlich abgegangen"},
                    {id: "1", name: "Zurückgezogen"},
                    {id: "2", name: "Standortwechsel Pension"},
                    {id: "4", name: "Sonstiger Abgang"}
                ];
            },
            HINTS: {
                HITNUMMER_HINT: `
                    <p>Bitte geben Sie hier die HIT-Registriernummer Ihres Betriebes an, sofern diese nicht voreingeblendet ist.
                    Die einzelnen Nummern der Betriebsstätten sind nicht zu erfassen.</p>
                    <p>Sofern Sie Tiere haben, die während des Haltungszeitraums auf Pensionsbetrieben gehalten werden, geben
                    Sie die HIT-Registriernummer des Pensionsbetriebes bitte zusätzlich kommasepariert bei der entsprechenden Ohrmarke an.</p>
                `,
                OHRMARKENNUMMER_HINT: `
                    <p>Bitte geben Sie hier die Ohrmakkennummer der Mutterkühe ohne Leerzeichen bzw. Sonderzeichen ein, in einer separaten Zeile für jede Kuh.</p>
                    <p>Die Ohrmarkenummer besteht aus <strong>Ländercode "DE" oder "276"</strong> und <strong>10-stellige Nummer <i>(zweiteilig)</i>:</strong></p>
                    <p>- 2 Ziffern (Bundesland: 01, 02, ... 16),</p>
                    <p>- 8 Ziffern (individuell)</p>
                    <p>Beispiel: Eine Ohrmarke mit der Nummer 2760912345678 wäre eine deutsche Ohrmarke aus dem Bundesland Thüringen (09) mit der individuellen Nummer 12345678.</p>
                `,
            }
        };

        obj.columns = [
            {name: "NUMMER",            title: "Nr.",               type: "integer", rowNumber: true, readOnly: true, ignoreForSpareRow: true, width: 50},
            //{name: "OHRMARKENNUMMER",   title: "Ohrmarkennummer",   type: "text", stripHTML: true, placeholder: "DE0662641857", trimFunction: formTableComponent.trim, width: 130},
            {name: "OHRMARKENNUMMER",   title: "Ohrmarkennummer",   type: "text", placeholder: "DE0662641857", trimFunction: formTableComponent.trim, hint: LISTS.HINTS.OHRMARKENNUMMER_HINT,width: 130},
            {name: "NACHWEISKALBUNG",   title: "Nachweis Kalbung",  type: "dropdown", source: LISTS.NACHWEISKALBUNG_SOURCE, readOnly: true, width: 130},
            {name: "HITNUMMER",         title: "HIT-Registriernummer(n) im Haltungszeitraum", type: "text", stripHTML: true, placeholder: "061234567899", trimFunction: formTableComponent.trimCsv, hint: LISTS.HINTS.HITNUMMER_HINT, width: 150},
            {name: "BEANTRAGUNGSART",   title: "Beantragungsart",   type: "dropdown", source: LISTS.BEANTRAGUNGSART_SOURCE, width: 110},
            {name: "AENDERUNGSGRUND",   title: "Änderungsgrund",    type: "dropdown", source: LISTS.AENDERUNGSART_SOURCE, readOnly: formTableComponent.isErstantrag(), width: 150},
            {name: "BUTTONS",           title: "Aktion",            type: "text", rowNumber: true, readOnly: true, width: 75},
            {name: "UUID",              title: "UUID",              type: "hidden", defaultValue: formTableComponent.generateUUID, readOnly: true},
            {name: "VORBELEGT",         title: "VORBELEGT",         type: "hidden", readOnly: true},
            {name: "FILE",              title: "Dateiname",         type: "hidden", readOnly: true},
            {name: "FILE_UUID",         title: "Datei",             type: "hidden", readOnly: true},
            {name: "ABGEGEBEN",         title: "Abgegeben",         type: "hidden", readOnly: true},
        ];

        obj.onload = function (el, table) {
            let aenderungsgrundColumn = table.getColumnIndex("AENDERUNGSGRUND");
            let vorbelegtColumn = table.getColumnIndex("VORBELEGT");
            let abgegebenColumn = table.getColumnIndex("ABGEGEBEN");
            let isSachbearbeiter = $("[id*='sachbearbeiter']").text() === 'true';
            let gaAntragsphase = $("[id*='gaAntragsphase']").text() === 'REGULAERE_ANTRAGSPHASE';
            for (let i = 0; i < table.getData().length; i++) {
                let row = table.getData()[i];
                let readOnlyColumns = {};
                let aenderungsgrund = row[aenderungsgrundColumn];
                let vorbelegt = row[vorbelegtColumn] === true || row[vorbelegtColumn] === "true";
                let abgegeben = row[abgegebenColumn] === true || row[abgegebenColumn] === "true";
                let editable= !abgegeben || gaAntragsphase || isSachbearbeiter;
                readOnlyColumns.OHRMARKENNUMMER = !vorbelegt && editable;
                readOnlyColumns.HITNUMMER = editable || aenderungsgrund === "2";
                readOnlyColumns.BEANTRAGUNGSART = editable;
                table.setCellsEditableByJSON(i, readOnlyColumns);
            }

            callbacks.updateBeantragteTiereCount({table});

            table.orderBy(0);
        }

        return obj;

    })();

    window["mutterkuehe"] = formTableComponent.createTableOptions(options);

    let callbacks = (function () {

        let obj = {};

        obj.onchangecell = function (args) {
            const { table, columnName, newValue, index } = args;
            let row = table.getData()[index];
            if (columnName === "AENDERUNGSGRUND") {
                let readOnlyColumns = {};
                let isSachbearbeiter = $("[id*='sachbearbeiter']").text() === 'true';
                let gaAntragsphase = $("[id*='gaAntragsphase']").text() === 'REGULAERE_ANTRAGSPHASE';
                let abgegebenColumn = table.getColumnIndex("ABGEGEBEN");
                let abgegeben = row[abgegebenColumn] === true || row[abgegebenColumn] === "true";
                let editable= !abgegeben || gaAntragsphase || isSachbearbeiter;
                readOnlyColumns.HITNUMMER = editable || newValue === "2";
                table.setCellsEditableByJSON(index, readOnlyColumns);
            }
        }

        obj.updateBeantragteTiereCount = function (args) {
            let { table } = args;
            let beantragungsartData = table.getColumnDataByName("BEANTRAGUNGSART");

            let beantragtetiere = beantragungsartData.reduce((result, value) => value === 'beantragt' ? result + 1 : result, 0);
            let gemeldeteersatztiere = beantragungsartData.reduce((result, value) => value === 'ersatzstier' ? result + 1 : result, 0);
            $("[data-name='BEANTRAGTETIERE']").val(beantragtetiere);
            $("[data-name='GEMELDETEERSATZTIERE']").val(gemeldeteersatztiere);

            $("#beantragtekuehe").html(beantragtetiere);
            $("#ersatztiere").html(gemeldeteersatztiere);
        }

        obj.ondeleterow = obj.updateBeantragteTiereCount;
        obj.onupdaterows = obj.updateBeantragteTiereCount;

        obj.onbeforeupdaterow = function (args) {
            const { table, rowData } = args;

            if (rowData.FILE) {
                rowData.NACHWEISKALBUNG = "sonstigernachweis";
            }

        }


        obj.errorFunction = function (args) {
            let table = formTableComponent.getTable(tableId);
            let tableElement = $("[data-name=MUTTERKUEHETABLE]");

            let anyError = false;

            let beantragtColumn = table.getColumnIndex("BEANTRAGUNGSART");
            let beantragtData = table.getColumnDataByName("BEANTRAGUNGSART");

            let ohrmarkenColumn = table.getColumnIndex("OHRMARKENNUMMER");
            let ohrmarkenData = table.getColumnDataByName("OHRMARKENNUMMER");

            let hitnummerColumn = table.getColumnIndex("HITNUMMER");
            let hitnummerData = table.getColumnDataByName("HITNUMMER");

            let abgegebenColumn = table.getColumnIndex("ABGEGEBEN");
            let abgegebenData = table.getColumnDataByName("ABGEGEBEN");

            let ohrmarkenDoppelt = {};
            for (let i = 0; i < ohrmarkenData.length; i++) {
                let ohrmarke = ohrmarkenData[i];
                ohrmarkenDoppelt[ohrmarke] = ohrmarkenDoppelt.hasOwnProperty(ohrmarke);
            }

            // String mit dem Hinweis über das falsche Ohrmarkennummerformat
            const ohrMarkenHinweis = 'Die eingegebene Ohrmarkennummer entspricht nicht dem deutschen Format.';

            $(table.rows).find(".berechnungstabelle-error").removeClass("berechnungstabelle-error");
            $(table.rows).find("[title]").attr("title", null);
            for (let i = 0; i < ohrmarkenData.length; i++) {
                let ohrmarke = ohrmarkenData[i];
                let hitnummer = hitnummerData[i];
                let beantragt = beantragtData[i];
                let abgegeben = String(abgegebenData[i]) === "true";

                //let ohrmarkePattern = /^([A-Za-z]{2})([0-9]{2})([0-9]{3})([0-9]{5})$/;
                let ohrmarkePattern = /^(DE|276)([01])([0-9])([0-9]{3})([0-9]{5})$/;
                let hitnummerPattern = /^[0-9]{12}$/;

                let isOhrmarkeGueltig = ohrmarkePattern.test(ohrmarke);
                let isOhrmarkeEmpty = typeof ohrmarke === "string" && ohrmarke.trim() === "";

                //------------gelben Hintergrund für die Zelle festlegen-----------------------
                let $zelle = $(table.rows[i]).find("[data-x=" + ohrmarkenColumn + "]");
                if (!isOhrmarkeEmpty && !isOhrmarkeGueltig) {
                    $zelle[0].style.setProperty("background-color", "yellow", "important");
                } else {
                    $zelle[0].style.setProperty("background-color", "", "important");
                }

                let isHitnummerGueltig = typeof hitnummer === "string" && hitnummer.split(",").every((nummer) => hitnummerPattern.test(nummer));
                let isHitnummerEmpty = typeof hitnummer === "string" && hitnummer.trim() === "";
                let isBeantragtEmpty = typeof beantragt === "string" && beantragt.trim() === "";

                let activePlausis = {};

                if ((!isOhrmarkeEmpty && !isOhrmarkeGueltig) || (beantragt && isOhrmarkeEmpty)) {
                    if (!isOhrmarkeGueltig) {
                        activePlausis[ohrmarkenColumn] = ohrMarkenHinweis;
                    }
                    if (isOhrmarkeEmpty) {
                        activePlausis[ohrmarkenColumn] = "Bitte geben Sie eine Ohrmarkennummer an.";
                    }
                }

                if (!isOhrmarkeEmpty && !abgegeben && ohrmarkenDoppelt[ohrmarke]) {
                    activePlausis[ohrmarkenColumn] = "Sie haben eine Ohrmarke doppelt erfasst. Bitte korrigieren Sie ihre Angabe.";
                }

                if ((!isHitnummerEmpty && !isHitnummerGueltig) || (beantragt && isHitnummerEmpty)) {
                    if (!isHitnummerGueltig) {
                        activePlausis[hitnummerColumn] = "Sie haben eine ungültige HIT-Registriernummer angegeben.";
                    }
                    if (isHitnummerEmpty) {
                        activePlausis[hitnummerColumn] = "Bitte geben Sie eine HIT-Registriernummer an.";
                    }
                }

                if (!isOhrmarkeEmpty && isHitnummerEmpty) {
                    activePlausis[hitnummerColumn] = "Bitte geben Sie eine HIT-Registriernummer an.";
                }

                if (!isOhrmarkeEmpty && isBeantragtEmpty) {
                    activePlausis[beantragtColumn] = "Bitte geben Sie eine Beantragungsart an.";
                }

                // l
                if (Object.values(activePlausis).length > 1 ||
                        (Object.values(activePlausis).length === 1 && Object.values(activePlausis)[0] !== ohrMarkenHinweis)) {
                    anyError = true;
                    for (let j = 0; j < table.options.columns.length; j++) {
                        if (activePlausis.hasOwnProperty(j)) {
                            $(table.rows[i]).find("[data-x=" + j + "]").addClass("berechnungstabelle-error").attr("title", activePlausis[j]);
                        }
                    }
                }

            }

            if (anyError) {
                tableElement.error("Es gibt noch einen Fehler");
            } else {
                tableElement.error("");
            }

        }
        window["mutterkuehe"]["errorFunction"] = obj.errorFunction;

        obj.onaddtable = function (args) {
            let { table } = args;
            initNummer(table);
        }

        return obj;

    })();

    formTableComponent.addTableCallbacks(tableId, callbacks);

    let addEventListeners = function () {

        let handleKalbungUpload = async function (event) {
            let target = event.target;
            let td = target.closest("td");
            let y = td.getAttribute("data-y");
            let table = formTableComponent.getTable(tableId);
            let uuid = table.getColumnDataByName("UUID")[y];

            await formTableSetFormTableUploadRow([{name: "uuid", value: uuid}, {name: "tableId", value: tableId}]);

            $("[id$=form-table-upload] input").eq(0).click();
        }
        $(document).off("click", ".kalbung-nachweis")
            .on("click", ".kalbung-nachweis", handleKalbungUpload);


        let handleAlleBeantragen = async function () {
            let table = formTableComponent.getTable(tableId);
            let beantragtColumn = table.getColumnIndex("BEANTRAGUNGSART");
            let uuidColumn = table.getColumnIndex("UUID");
            let abgegebenColumn = table.getColumnIndex("ABGEGEBEN");
            let insertJson = [];

            for (let i = 0; i < table.getData().length; i++) {
                let row = table.getData()[i];
                let abgegeben = row[abgegebenColumn] === true || row[abgegebenColumn] === "true";
                if (row[beantragtColumn] !== "beantragt" && !abgegeben) {
                    insertJson.push({BEANTRAGUNGSART: "beantragt", UUID: row[uuidColumn]});
                }
            }

            if (Object.keys(insertJson).length > 0) {
                await formTableSaveRow([{name: "tableId", value: tableId}, {name: "rowDataObject", value: JSON.stringify(insertJson)}]);
                callbacks.errorFunction();
            }
        }
        $(document).off("click", "[name=btnBeantragen]")
            .on("click", "[name=btnBeantragen]", handleAlleBeantragen);

    }
    addEventListeners();

    /**
     * Initialisiert die NUMMER Spalte der Mutterkühe Tabelle.
     * In alle Zeilen wird ein Wert eingetragen, wenn keiner vorhanden ist.
     *
     * @param table Object jescel Tabelle für Mutterkühe
     */
    let initNummer = function (table) {
        let rowDataObject = [];
        let max = 0;
        let nummerColumn = table.getColumnIndex("NUMMER");
        let uuidColumn = table.getColumnIndex("UUID");
        for (let i = 0; i < table.getData().length; i++) {
            let row = table.getData()[i];
            let nummer = Number(row[nummerColumn]);
            if (!isNaN(nummer)) {
                max = nummer;
            }
        }
        for (let i = 0; i < table.getData().length; i++) {
            let row = table.getData()[i];
            let nummer = Number(row[nummerColumn]);
            if (isNaN(nummer) || nummer <= 0) {
                rowDataObject.push({UUID: row[uuidColumn], NUMMER: ++max});
            }
        }
        formTableSaveRow([{name: "tableId", value: tableId}, {name: "rowDataObject", value: JSON.stringify(rowDataObject)}]);
    }

});